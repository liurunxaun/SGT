# Model arguments
model_name_or_path: /ssd5/rxliu/models/DeepSeek-R1-0528-Qwen3-8B
model_revision: main
torch_dtype: bfloat16
attn_implementation: flash_attention_2

# Data training arguments
# We edit the DeepSeek chat template to ensure (a) the reasoning block within <think> and </think> is included in the completion and (b) the <think> tag is not part of the prefill so that the format reward works
chat_template: "{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='') %}{%- for message in messages %}{%- if message['role'] == 'system' %}{% set ns.system_prompt = message['content'] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message['role'] == 'user' %}{%- set ns.is_tool = false -%}{{'<｜User｜>' + message['content']}}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is none %}{%- set ns.is_tool = false -%}{%- for tool in message['tool_calls']%}{%- if not ns.is_first %}{{'<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\\n' + '```json' + '\\n' + tool['function']['arguments'] + '\\n' + '```' + '<｜tool▁call▁end｜>'}}{%- set ns.is_first = true -%}{%- else %}{{'\\n' + '<｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\\n' + '```json' + '\\n' + tool['function']['arguments'] + '\\n' + '```' + '<｜tool▁call▁end｜>'}}{{'<｜tool▁calls▁end｜><｜end▁of▁sentence｜>'}}{%- endif %}{%- endfor %}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is not none %}{%- if ns.is_tool %}{{'<｜tool▁outputs▁end｜>' + message['content'] + '<｜end▁of▁sentence｜>'}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message['content'] %}{{'<｜Assistant｜>' + content + '<｜end▁of▁sentence｜>'}}{%- endif %}{%- endif %}{%- if message['role'] == 'tool' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{'<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- set ns.is_output_first = false %}{%- else %}{{'\\n<｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{'<｜tool▁outputs▁end｜>'}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{'<｜Assistant｜>'}}{% endif %}"
dataset_name: /ssd5/rxliu/datasets/AIME24/data
dataset_prompt_column: problem
# system_prompt: "You are a helpful AI Assistant that provides well-reasoned and detailed responses. You first think about the reasoning process as an internal monologue and then provide the user with the answer. Respond in the following format: <think>\n...\n</think>\n<answer>\n...\n</answer>"
system_prompt: |
  You are a helpful AI Assistant that provides well-reasoned and detailed responses.
  When replying, produce exactly two blocks in this format (with newlines as shown):

  <think>
  ...structured DAG-style internal reasoning (see conventions below)...
  </think>
  <answer>
  ...concise user-facing final answer...
  </answer>

  CONVENTIONS for the <think> block (represent internal reasoning as a directed acyclic graph):

  1. Nodes:
     - Represent each reasoning state as a node using:
       <Node id="nX">
       <content>
       Short summary of the node's state (one brief paragraph).
       </content>
       <parents>comma-separated parent node IDs (optional)</parents>
       </Node>
     - Node ids must be unique (n0, n1, ...). Use the same ids when referring to parents.

  2. Operations:
     - When you perform an operation, include the exact operation tags:
       <Generate> ... </Generate>
       <Aggregate> ... </Aggregate>
       <Feedback> ... </Feedback>
       <Refine> ... </Refine>
     - Each operation block should describe which node(s) it reads from and which node(s) it produces or modifies.
     - Example usage patterns (use one or more as needed, any order, any number of times):
       - <Generate> creates new <Node id="..."> blocks and sets their <parents>.
       - <Aggregate> merges several existing nodes and produces a new <Node>.
       - <Feedback> indicates returning to/revising an earlier node (reference its id).
       - <Refine> improves the content of an existing node (include the updated <Node> with same id).

  3. Graph rules:
     - The structure should form a DAG (avoid cycles).
     - Operations may appear in any order and can be repeated.
     - Keep each <content> concise (1–3 short sentences).
     - Use newlines exactly after opening and before closing tags so that the outer <think> and <answer> blocks are on their own lines.

  4. Final answer:
     - After finishing the <think> block, provide a concise <answer> block that contains only the final user-facing answer (do not repeat internal reasoning).

  Be consistent and machine-friendly in tag usage so that the reasoning graph can be parsed automatically.

# GRPO trainer config
bf16: true
use_vllm: false
do_eval: false
gradient_accumulation_steps: 1
gradient_checkpointing: true
gradient_checkpointing_kwargs:
  use_reentrant: false
hub_model_id: deepseek-ai/DeepSeek-R1-0528-Qwen3-8B
hub_strategy: every_save
learning_rate: 1.0e-06
log_completions: true
log_level: info
logging_first_step: true
logging_steps: 1
logging_strategy: steps
lr_scheduler_type: cosine_with_min_lr
lr_scheduler_kwargs:
  min_lr_rate: 0.1
max_prompt_length: 2048
max_completion_length: 2048
max_steps: -1
num_generations: 4
num_train_epochs: 1
output_dir: /data/home/the/rxliu/projects/open-r1-main/output/DeepSeek-R1-0528-Qwen3-8B-AIME24-GRPO-Label_only
overwrite_output_dir: true
per_device_eval_batch_size: 16
per_device_train_batch_size: 4
push_to_hub: false
# report_to:
# - wandb
reward_funcs:
- accuracy
- format
- tag_count
reward_weights:
- 1.0
- 1.0
- 1.0
save_strategy: "epoch"
save_total_limit: 1
seed: 42
temperature: 0.7
use_liger_kernel: true
warmup_ratio: 0.1
